---

layout: post
title: algorithms in a nut shell 1
author: tonie
tags: ['Algorithms']

---

### [{{page.title}}]({{site.baseurl}}{{page.url}}) ###
+ @{{page.date | date_to_string}}

-------------------------------------------------------------------------------

    今天来研究一下《算法技术手册》这本书。
	和《算法导论》以及sedgewick的《算法》不太一样，前两者注重的是内功的修养，提供算法描述的也主要是伪代码为主。毕竟实践中的具体实现不在它们的考量范围中间（越原理性的东西，利用的好，对于我们看待问题就越具有指导意义；如果对于原理云里雾里的，不但容易多走弯路，也不利于发散地去思考问题），从一堆的数学推导以及原理分析的角度去看待算法。而这本书，是从一个实践的角度去看待算法，也就是在具体的软件工程过程中间怎么利用这些算法，并且根据经验作出性能分析以及算法决策。
	三位作者都是研究cs和SE的，他们在这样一本将算法的书中加入了software engineering的元素。SE很注重的就是对于变性以及可变性的分析，对于复杂性的控制和维护，这也将在这本要介绍算法同时又要兼顾到实际使用时的书所需要的。毕竟，越高的抽象层次，面对具体的问题之间天然存在比较大的gap，这个gap或者说算法中的对象与具体问题的mapping是需要对问题的分析来进行填补的。而从另一方面来看，对于某个具体case的过于实际，分析和解决，也会带来一定的问题：在解决问题的过程中，人们难免会将实际问题中的琐碎的细节夹杂到对于具体算法的选择和实施中去。SE重要的思想就是分离这些框架性的和变化的但不是核心的东西，算法本身是核心的抽象。提供对数据类型良好的封装以及行为接口的约定，则在利用算法时，对于数据结构的操作就可以省心得多。例子之后会举。
    以下是几个涉及的原则：	
> 将算法和解决的问题分开；
> 经验支持的数学分析；[这里](http://sourceforge.net/projects/junit)

    不同算法会根据实际的性能分析归类到特定的性能族中去。
	同时也会涉及相似的设计，或者特定的数据结构将对于不同的算法造成如何的影响。
	
    

	

